{"version":3,"sources":["components/Card.js","components/CardGroup.js","components/Cards.js","hocs/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","card","title","subtitle","description","react_default","a","createElement","className","CardItems","items","activeItem","map","item","index","active","parseInt","classes","concat","key","components_Card","Pagination","props","onChange","handleClickItem","_ref2","target","dataset","data-index","onClick","CardGroup","_ref3","_useState","useState","_useState2","Object","slicedToArray","state","setState","CardGroup_CardItems","CardGroup_Pagination","Cards","cards","react","components_CardGroup","WithCards","components_Cards","App","hocs_Cards","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAceA,EAZF,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KACJC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,YAExB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcN,GAC5BG,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiBL,GAClCE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAoBJ,KCNxCK,EAAY,SAAAT,GAAA,IAAEU,EAAFV,EAAEU,MAAOC,EAATX,EAASW,WAAT,OACdN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACTE,EAAME,IAAI,SAACC,EAAMC,GACd,IAAMC,EAASC,SAASL,KAAgBG,EAClCG,EAAO,mBAAAC,OAAsBH,EAAS,SAAW,WAEvD,OACIV,EAAAC,EAAAC,cAAA,MACIC,UAAWS,EACXE,IAAKL,GAELT,EAAAC,EAAAC,cAACa,EAAD,CAAMnB,KAAMY,SAO1BQ,EAAa,SAAAC,GAAS,IACjBZ,EAAmBY,EAAnBZ,MAAOa,EAAYD,EAAZC,SAERC,EAAkB,SAAAC,GAAc,IAC3BX,EAD2BW,EAAZC,OACCC,QAAhBb,MAEPS,GAAYA,EAAST,IAGzB,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVE,EAAME,IAAI,SAACC,EAAMC,GAAP,OACPT,EAAAC,EAAAC,cAAA,UACIqB,aAAYd,EACZe,QAASL,EACTL,IAAKL,QA8BVgB,EAvBG,SAAAC,GAAa,IAAXrB,EAAWqB,EAAXrB,MAAWsB,EACDC,mBAAS,CAACtB,WAAY,IADrBuB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACpBK,EADoBH,EAAA,GACbI,EADaJ,EAAA,GAOpBvB,EAAc0B,EAAd1B,WAEP,OACIN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAACgC,EAAD,CACI5B,WAAYA,EACZD,MAAOA,IAEXL,EAAAC,EAAAC,cAACiC,EAAD,CACIjB,SAba,SAAAT,GACrBwB,EAAS,CAAC3B,WAAYG,KAadJ,MAAOA,MCzCR+B,EAhBD,SAAAnB,GAAS,IACZoB,EAASpB,EAAToB,MAEP,OACIrC,EAAAC,EAAAC,cAACoC,EAAA,SAAD,KACItC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,aAEAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACTkC,EAAM9B,IAAI,SAAAZ,EAAUc,GAAV,IAAEJ,EAAFV,EAAEU,MAAF,OACPL,EAAAC,EAAAC,cAACqC,EAAD,CAAWlC,MAAOA,EAAOS,IAAKL,gBCJnC+B,EAJG,SAAAvB,GACd,OAAOjB,EAAAC,EAAAC,cAACuC,EAAD,CAAOJ,MAAOA,OCUVK,0LARX,OACE1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyC,EAAD,cAJUC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d0023fa4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({card}) => {\r\n    const {title, subtitle, description} = card;\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <h3 className=\"card-title\">{title}</h3>\r\n            <small className=\"card-subtitle\">{subtitle}</small>\r\n            <h1 className=\"card-description\">{description}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React, {useState} from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardItems = ({items, activeItem}) => (\r\n    <ul className=\"card-group-items\">\r\n        {items.map((item, index) => {\r\n            const active = parseInt(activeItem) === index;\r\n            const classes = `card-group-item ${active ? 'active' : 'initial'}`;\r\n\r\n            return (\r\n                <li\r\n                    className={classes}\r\n                    key={index}\r\n                >\r\n                    <Card card={item} />\r\n                </li>\r\n            )\r\n        })}\r\n    </ul>\r\n);\r\n\r\nconst Pagination = props => {\r\n    const {items, onChange} = props;\r\n\r\n    const handleClickItem = ({target}) => {\r\n        const {index} = target.dataset;\r\n\r\n        onChange && onChange(index);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-pagination\">\r\n            {items.map((item, index) => (\r\n                <button\r\n                    data-index={index}\r\n                    onClick={handleClickItem}\r\n                    key={index}>\r\n                </button>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst CardGroup = ({items}) => {\r\n    const [state, setState] = useState({activeItem: 0});\r\n\r\n    const handleChangeItem = index => {\r\n        setState({activeItem: index});\r\n    }\r\n\r\n    const {activeItem} = state;\r\n\r\n    return (\r\n        <li className=\"card-group\">\r\n            <CardItems\r\n                activeItem={activeItem}\r\n                items={items}\r\n            />\r\n            <Pagination\r\n                onChange={handleChangeItem}\r\n                items={items}\r\n            />\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default CardGroup;","import React, {Fragment} from 'react';\r\nimport CardGroup from './CardGroup';\r\n\r\nconst Cards = props => {\r\n    const {cards} = props;\r\n\r\n    return (\r\n        <Fragment>\r\n            <h1 className=\"title\">Memorize!</h1>\r\n\r\n            <ul className=\"cards-group\">\r\n                {cards.map(({items}, index) => (\r\n                    <CardGroup items={items} key={index} />\r\n                ))}\r\n            </ul>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport Cards from '../components/Cards';\r\nimport {cards} from '../data/cards.json';\r\n\r\nconst WithCards = props => {\r\n    return <Cards cards={cards} />\r\n}\r\n\r\nexport default WithCards;","import React, { Component } from 'react';\nimport WithCards from './hocs/Cards';\n\nimport './style/main.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WithCards />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}